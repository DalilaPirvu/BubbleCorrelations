{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bubble Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "import math\n",
    "import seaborn\n",
    "import statistics as stat\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy as scp\n",
    "import scipy.optimize as sco\n",
    "import scipy.signal as scs\n",
    "import scipy.special as ssp\n",
    "import scipy.integrate as sci\n",
    "from labellines import labelLines\n",
    "from collections import OrderedDict\n",
    "from itertools import zip_longest, groupby, cycle\n",
    "from numpy.random import seed, randn\n",
    "from scipy import stats\n",
    "from scipy.stats import shapiro, normaltest, anderson\n",
    "from statsmodels.graphics.gofplots import qqplot\n",
    "\n",
    "np_load_old = np.load\n",
    "np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulation Parameters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lamb =  1.5\n",
      "phi0 =  0.8975979010256552\n",
      "lenLat =  3162.2776601683795\n",
      "m2eff =  0.01\n",
      "dtout/dt =  32.0\n",
      "units =  2.0\n"
     ]
    }
   ],
   "source": [
    "nLat = 8192\n",
    "nTime = 256\n",
    "nSims = 20000\n",
    "minSim = 0\n",
    "simstep = 1\n",
    "\n",
    "lamb = 1. + 0.5; print('lamb = ', lamb)\n",
    "phi0 = 2.*np.pi / 7.; print('phi0 = ', phi0)\n",
    "\n",
    "nu = 2.*10**(-3)\n",
    "lenLat = 8 * 0.5 * 50. / np.sqrt(2. * nu); print('lenLat = ', lenLat)\n",
    "m2eff = 4. * nu * (- 1. + lamb**2); print('m2eff = ', m2eff)\n",
    "\n",
    "alpha = 16.\n",
    "phi_initial = np.pi\n",
    "\n",
    "nyq = nLat//2+1; spec = nyq//16; dx = lenLat/nLat; dk = 2.*np.pi/lenLat\n",
    "dt = dx/alpha; dtout = dt*nLat/nTime; print('dtout/dt = ', dtout/dt)\n",
    "light_cone = dtout/dx\n",
    "unit_conv = nLat/nTime/alpha; print('units = ', unit_conv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "filter_size =  4.542813258696356\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '$\\\\phi$')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "instanton_location = '/home/dpirvu/inst/unstable/dev/thick_wall_instanton_interp.dat'\n",
    "a = np.genfromtxt(instanton_location)\n",
    "coleman_bubble = 2*np.pi-a[:,1]\n",
    "xoffset = 50\n",
    "temp = coleman_bubble[len(coleman_bubble)//2-xoffset:len(coleman_bubble)//2+xoffset]\n",
    "tempcoords = a[len(coleman_bubble)//2-xoffset:len(coleman_bubble)//2+xoffset,0]\n",
    "peaks, _ = scs.find_peaks(temp)\n",
    "fwhm = scs.peak_widths(temp, peaks, rel_height=0.5)\n",
    "radius_Coleman_bubble = max(fwhm[0])/2.\n",
    "filter_size = radius_Coleman_bubble\n",
    "print('filter_size = ', filter_size)\n",
    "\n",
    "plt.plot(tempcoords/dx, temp)\n",
    "plt.plot(peaks-xoffset, temp[peaks], \"x\")\n",
    "[plt.hlines(fwhm[1][i], fwhm[2][i]-xoffset, fwhm[3][i]-xoffset, color=\"C2\") for i in range(len(fwhm[1]))]\n",
    "plt.xlabel(r'$r_{\\rm E}$'); plt.ylabel(r'$\\phi$')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "curvature =  0.014444477889845467\n",
      "wall_tension =  0.46497413771169294\n",
      "epsilon =  0.016\n",
      "R_coleman =  29.06088360698081\n",
      "wall_thkn =  80.67292631362025\n"
     ]
    }
   ],
   "source": [
    "def V(phi):\n",
    "    return ( -np.cos(phi) + 0.5 * lamb**2 * np.sin(phi)**2 ) * 4 * nu\n",
    "def dV(phi):\n",
    "    return ( np.sin(phi) + 0.5 * lamb**2 * np.sin(2*phi) ) * 4 * nu\n",
    "def ddV(phi):\n",
    "    return ( np.cos(phi) + lamb**2 * np.cos(2*phi) ) * 4 * nu\n",
    "\n",
    "right_phi_at_V_max = sco.minimize_scalar(lambda x: -V(x), bounds=[np.pi, 2*np.pi], method='bounded')\n",
    "left_phi_at_V_max = sco.minimize_scalar(lambda x: -V(x), bounds=[0, np.pi], method='bounded')\n",
    "right_left_phi_at_V_max = sco.minimize_scalar(lambda x: -V(x), bounds=[2*np.pi, 3*np.pi], method='bounded')\n",
    "\n",
    "def F(x):\n",
    "    return V(x) - V(phi_initial)\n",
    "phi_upper_bound = sco.fsolve(F, 5.5)[0]\n",
    "phi_lower_bound = sco.fsolve(F, 1.5)[0]\n",
    "phi_upper_lower_bound = sco.fsolve(F, 8)[0]\n",
    "\n",
    "############################################################\n",
    "kappa = np.abs(ddV(right_phi_at_V_max.x))/(1 + dV(right_phi_at_V_max.x)**2)**1.5; print('curvature = ', kappa)\n",
    "wall_tension, err = sci.quad(lambda x: np.sqrt(2*(V(x) - V(2*np.pi))), np.pi, 2*np.pi); print('wall_tension = ', wall_tension)\n",
    "epsilon = V(np.pi) - V(2*np.pi); print('epsilon = ', epsilon)\n",
    "R_coleman = wall_tension/epsilon; print('R_coleman = ', R_coleman)\n",
    "wall_thkn = right_phi_at_V_max.x / np.sqrt( V(right_phi_at_V_max.x) - V(np.pi) ); print('wall_thkn = ', wall_thkn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "plots_file = '/home/dpirvu/big_plot_file/bubble_correlations/correlation_function/'\n",
    "def sim_location(sim):\n",
    "    return '/gpfs/dpirvu/bubble_correlations/t'+str(nTime)+'_x'+str(nLat)+'_len{:.4f}'.format(lenLat)+'_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'_alph{:.4f}'.format(alpha)+'_spec'+str(spec)+'_sim'+str(sim)+'_fields.dat'\n",
    "def sim_suffix(phi0, lamb):\n",
    "    return '_for_phi0{:.4f}'.format(phi0)+'_len{:.4f}'.format(lenLat)+'_lamb{:.4f}'.format(lamb)+'_t'+str(nTime)+'_x'+str(nLat)\n",
    "def pickle_location(phi0, lamb):\n",
    "    return '/home/dpirvu/pickle_location/bubble_correlations/phi0'+str(int(20*np.pi/phi0))+'_lambda'+str(int(10*lamb))+'/'\n",
    "def pickle_corr_location(phi0, lamb, threshold, type):\n",
    "    return '/home/dpirvu/pickle_location/bubble_correlations/phi0'+str(int(20*np.pi/phi0))+'_lambda'+str(int(10*lamb))+'/th_correlator_type'+type+'_threshold{:.2f}'.format(threshold)\n",
    "\n",
    "def positive_data_file(phi0, lamb, minSim, maxSim, multiplier):\n",
    "    pickle = pickle_location(phi0, lamb)\n",
    "    suffix = sim_suffix(phi0, lamb)\n",
    "    return pickle+'positive_targets_sims'+str(minSim)+'_to'+str(maxSim-1)+'_multiplier'+str(multiplier)+suffix+'.npy'\n",
    "\n",
    "def negative_data_file(phi0, lamb, minSim, maxSim, multiplier):\n",
    "    pickle = pickle_location(phi0, lamb)\n",
    "    suffix = sim_suffix(phi0, lamb)\n",
    "    return pickle+'negative_targets_sims'+str(minSim)+'_to'+str(maxSim-1)+'_multiplier'+str(multiplier)+suffix+'.npy'\n",
    "\n",
    "def import_all_data(lamb, phi0, multiplier):\n",
    "    if lamb != 1.6:\n",
    "        a = np.load(positive_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "        ab = np.load(positive_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "        abc = np.load(positive_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "        abcd = np.load(positive_data_file(phi0, lamb, 12000, 16000, multiplier))\n",
    "        abcde = np.load(positive_data_file(phi0, lamb, 16000, 20000, multiplier))\n",
    "        args = (a, ab, abc, abcd, abcde)\n",
    "        positive_targets = np.concatenate(args).tolist()\n",
    "        all_sims = np.arange(len(positive_targets))\n",
    "\n",
    "        z = np.load(negative_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "        zy = np.load(negative_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "        zyx = np.load(negative_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "        zyxw = np.load(negative_data_file(phi0, lamb, 12000, 16000, multiplier))\n",
    "        zyxwv = np.load(negative_data_file(phi0, lamb, 16000, 20000, multiplier))\n",
    "        args = (z, zy, zyx, zyxw, zyxwv)\n",
    "        negative_targets = np.concatenate(args).tolist()\n",
    "    else:\n",
    "        a = np.load(positive_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "        ab = np.load(positive_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "        abc = np.load(positive_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "        args = (a, ab, abc)\n",
    "        positive_targets = np.concatenate(args).tolist()\n",
    "        all_sims = np.arange(len(positive_targets))\n",
    "\n",
    "        z = np.load(negative_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "        zy = np.load(negative_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "        zyx = np.load(negative_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "        args = (z, zy, zyx)\n",
    "        negative_targets = np.concatenate(args).tolist()\n",
    "    return positive_targets, negative_targets, all_sims"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_multiplier = []\n",
    "list_threshold = []\n",
    "list_type = ['++', '+-', '++--']\n",
    "\n",
    "overshoot_threshold = right_left_phi_at_V_max.x\n",
    "for multiplier in [0.75, 1, 1.25]:\n",
    "    threshold = right_phi_at_V_max.x + np.abs(right_phi_at_V_max.x-phi_upper_bound)*multiplier\n",
    "    list_multiplier.append(multiplier)\n",
    "    list_threshold.append(threshold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "xmax = 1000\n",
    "xmin = 1\n",
    "tmax = 100\n",
    "tmin = -100\n",
    "\n",
    "xstep = 5\n",
    "tstep = 0.5*unit_conv\n",
    "\n",
    "MMmin = 2\n",
    "Rrange = np.arange(xmin, xmax+1, xstep)\n",
    "Trange = np.arange(tmin, tmax+1, tstep)*unit_conv\n",
    "\n",
    "xx = Rrange/(radius_Coleman_bubble/dx)\n",
    "#xx = Rrange/kappa\n",
    "\n",
    "MMxx = xx[MMmin-xmin:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def correlator(data, PositiveTargets, NegativeTargets, all_sims, R, xstep, T, tstep):\n",
    "    r_correlator = []\n",
    "    for sim in all_sims:\n",
    "        if data == 0:\n",
    "            bubbleCoords = PositiveTargets[sim]\n",
    "        elif data == 1:\n",
    "            bubbleCoords = NegativeTargets[sim]\n",
    "        elif data == 2:\n",
    "            bubbleCoords = PositiveTargets[sim] + NegativeTargets[sim]\n",
    "#            print(PositiveTargets[sim], NegativeTargets[sim], bubbleCoords)\n",
    "\n",
    "        nBubbles = len(bubbleCoords)\n",
    "        bubNDens = nBubbles / (nLat * nTime)\n",
    "        area = 2.* xstep * tstep\n",
    "        if nBubbles != 0:\n",
    "            if nBubbles > 1.:\n",
    "                bubCounter = 0.\n",
    "                for bubloc in range(nBubbles):\n",
    "                    t0, x0 = bubbleCoords[bubloc]\n",
    "                    bdx = [(x0 - bubbleCoords[j][1]) for j in range(nBubbles) if j != bubloc]\n",
    "                    for d in range(len(bdx)):\n",
    "                        if bdx[d] >= nLat//2:\n",
    "                            bdx[d] = bdx[d] - nLat\n",
    "                        elif bdx[d] <= -nLat//2:\n",
    "                            bdx[d] = bdx[d] + nLat\n",
    "                    bdt = [(t0 - bubbleCoords[j][0])*unit_conv for j in range(nBubbles) if j != bubloc]\n",
    "                    bubCounter += np.sum([1 for l in range(len(bdx)) if (R <= np.abs(bdx[l]) < R + xstep and T <= bdt[l] < T + tstep)])\n",
    "                r_correlator.append( bubCounter / (nBubbles * bubNDens * area) - 1. )\n",
    "            else:\n",
    "                r_correlator.append(-1)\n",
    "    return np.mean(r_correlator), np.std(r_correlator)/np.sqrt(len(r_correlator)-1)\n",
    "\n",
    "def mixed_correlator(data, PositiveTargets, NegativeTargets, all_sims, R, xstep, T, tstep):\n",
    "    r_correlator_P, r_correlator_N = [], []\n",
    "    for sim in all_sims:\n",
    "        posBubbleCoords, negBubbleCoords = PositiveTargets[sim], NegativeTargets[sim]\n",
    "        nPosBubbles, nNegBubbles = len(posBubbleCoords), len(negBubbleCoords)\n",
    "        nBubbles = nPosBubbles + nNegBubbles\n",
    "        if nBubbles != 0:\n",
    "            if nPosBubbles > 1. and nNegBubbles > 1.:\n",
    "                bubNDens = nBubbles / (nLat * nTime)\n",
    "                area = 2.* xstep * tstep\n",
    "                bubCounterP, bubCounterN = 0., 0.\n",
    "\n",
    "                if data == 3:\n",
    "                    for bubloc in range(nPosBubbles):\n",
    "                        t0, x0 = posBubbleCoords[bubloc]\n",
    "                        pbdx = [(x0 - negBubbleCoords[j][1]) for j in range(nNegBubbles)]\n",
    "                        for d in range(len(pbdx)):\n",
    "                            if pbdx[d] >= nLat//2:\n",
    "                                pbdx[d] = pbdx[d] - nLat\n",
    "                            elif pbdx[d] <= -nLat//2:\n",
    "                                pbdx[d] = pbdx[d] + nLat\n",
    "                        pbdt = [(t0 - negBubbleCoords[j][0])*unit_conv for j in range(nNegBubbles)]\n",
    "                        bubCounterP += np.sum([1 for l in range(len(pbdx)) if (R <= np.abs(pbdx[l]) < R + xstep and T <= pbdt[l] < T + tstep)])\n",
    "                    r_correlator_P.append( bubCounterP / (nBubbles * bubNDens * area) - 1)\n",
    "\n",
    "                elif data == 4:\n",
    "                    for bubloc in range(nNegBubbles):\n",
    "                        t0, x0 = negBubbleCoords[bubloc]\n",
    "                        nbdx = [(x0 - posBubbleCoords[j][1]) for j in range(nPosBubbles)]\n",
    "                        for d in range(len(nbdx)):\n",
    "                            if nbdx[d] >= nLat//2:\n",
    "                                nbdx[d] = nbdx[d] - nLat\n",
    "                            elif nbdx[d] <= -nLat//2:\n",
    "                                nbdx[d] = nbdx[d] + nLat\n",
    "                        nbdt = [(t0 - posBubbleCoords[j][0])*unit_conv for j in range(nPosBubbles)]\n",
    "                        bubCounterN += np.sum([1 for l in range(len(nbdx)) if (R <= np.abs(nbdx[l]) < R + xstep and T <= nbdt[l] < T + tstep)])\n",
    "                    r_correlator_N.append( bubCounterN / (nBubbles * bubNDens * area) - 1)\n",
    "            else:\n",
    "                if data == 3:\n",
    "                    r_correlator_P.append(-1)\n",
    "                elif data == 4:\n",
    "                    r_correlator_N.append(-1)\n",
    "    if data == 3:\n",
    "        return np.mean(r_correlator_P), np.std(r_correlator_P)/np.sqrt(len(r_correlator_P)-1)\n",
    "    elif data == 4:\n",
    "        return np.mean(r_correlator_N), np.std(r_correlator_N)/np.sqrt(len(r_correlator_N)-1)\n",
    "\n",
    "def distrib(sim_min, sim_max, data, PositiveTargets, NegativeTargets, all_sims, R, xstep, T, tstep):\n",
    "    r_correlator = []\n",
    "    for sim in all_sims[sim_min : sim_max]:\n",
    "        if data == 0:\n",
    "            bubbleCoords = PositiveTargets[sim]\n",
    "        elif data == 1:\n",
    "            bubbleCoords = NegativeTargets[sim]\n",
    "        elif data == 2:\n",
    "            bubbleCoords = PositiveTargets[sim] + NegativeTargets[sim]\n",
    "\n",
    "        nBubbles = len(bubbleCoords)\n",
    "        bubNDens = nBubbles / (nLat * nTime)\n",
    "        area = 2.* xstep * tstep\n",
    "        if nBubbles != 0:\n",
    "            if nBubbles > 1.:\n",
    "                bubCounter = 0.\n",
    "                for bubloc in range(nBubbles):\n",
    "                    t0, x0 = bubbleCoords[bubloc]\n",
    "                    bdx = [(x0 - bubbleCoords[j][1]) for j in range(nBubbles) if j != bubloc]\n",
    "                    for d in range(len(bdx)):\n",
    "                        if bdx[d] >= nLat//2:\n",
    "                            bdx[d] = bdx[d] - nLat\n",
    "                        elif bdx[d] <= -nLat//2:\n",
    "                            bdx[d] = bdx[d] + nLat\n",
    "                    bdt = [(t0 - bubbleCoords[j][0])*unit_conv for j in range(nBubbles) if j != bubloc]\n",
    "                    bubCounter += np.sum([1 for l in range(len(bdx)) if (R <= np.abs(bdx[l]) < R + xstep and T <= bdt[l] < T + tstep)])\n",
    "                r_correlator.append( bubCounter / (nBubbles * bubNDens * area) - 1. )\n",
    "            else:\n",
    "                r_correlator.append(-1)\n",
    "    return np.mean(r_correlator)\n",
    "\n",
    "def mixed_distrib(sim_min, sim_max, data, PositiveTargets, NegativeTargets, all_sims, R, xstep, T, tstep):\n",
    "    r_correlator_P, r_correlator_N = [], []\n",
    "    for sim in all_sims[sim_min : sim_max]:\n",
    "        posBubbleCoords, negBubbleCoords = PositiveTargets[sim], NegativeTargets[sim]\n",
    "        nPosBubbles, nNegBubbles = len(posBubbleCoords), len(negBubbleCoords)\n",
    "        nBubbles = nPosBubbles + nNegBubbles\n",
    "        if nBubbles != 0:\n",
    "            if nPosBubbles > 1. and nNegBubbles > 1.:\n",
    "                bubNDens = nBubbles / (nLat * nTime)\n",
    "                area = 2.* xstep * tstep\n",
    "                bubCounterP, bubCounterN = 0., 0.\n",
    "\n",
    "                if data == 3:\n",
    "                    for bubloc in range(nPosBubbles):\n",
    "                        t0, x0 = posBubbleCoords[bubloc]\n",
    "                        pbdx = [(x0 - negBubbleCoords[j][1]) for j in range(nNegBubbles)]\n",
    "                        for d in range(len(pbdx)):\n",
    "                            if pbdx[d] >= nLat//2:\n",
    "                                pbdx[d] = pbdx[d] - nLat\n",
    "                            elif pbdx[d] <= -nLat//2:\n",
    "                                pbdx[d] = pbdx[d] + nLat\n",
    "                        pbdt = [(t0 - negBubbleCoords[j][0])*unit_conv for j in range(nNegBubbles)]\n",
    "                        bubCounterP += np.sum([1 for l in range(len(pbdx)) if (R <= np.abs(pbdx[l]) < R + xstep and T <= pbdt[l] < T + tstep)])\n",
    "                    r_correlator_P.append( bubCounterP / (nBubbles * bubNDens * area) - 1)\n",
    "\n",
    "                elif data == 4:\n",
    "                    for bubloc in range(nNegBubbles):\n",
    "                        t0, x0 = negBubbleCoords[bubloc]\n",
    "                        nbdx = [(x0 - posBubbleCoords[j][1]) for j in range(nPosBubbles)]\n",
    "                        for d in range(len(nbdx)):\n",
    "                            if nbdx[d] >= nLat//2:\n",
    "                                nbdx[d] = nbdx[d] - nLat\n",
    "                            elif nbdx[d] <= -nLat//2:\n",
    "                                nbdx[d] = nbdx[d] + nLat\n",
    "                        nbdt = [(t0 - posBubbleCoords[j][0])*unit_conv for j in range(nPosBubbles)]\n",
    "                        bubCounterN += np.sum([1 for l in range(len(nbdx)) if (R <= np.abs(nbdx[l]) < R + xstep and T <= nbdt[l] < T + tstep)])\n",
    "                    r_correlator_N.append( bubCounterN / (nBubbles * bubNDens * area) - 1)\n",
    "            else:\n",
    "                if data == 3:\n",
    "                    r_correlator_P.append(-1)\n",
    "                elif data == 4:\n",
    "                    r_correlator_N.append(-1)\n",
    "    if data == 3:\n",
    "        return np.mean(r_correlator_P)\n",
    "    elif data == 4:\n",
    "        return np.mean(r_correlator_N)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Check Spread of Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_spread(data, xrange, xstep, T, tstep):\n",
    "    colors = cycle(('b', 'g', 'r'))\n",
    "    for phi0, lamb in zip([2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6], [1.5, 1.5, 1.6]):\n",
    "        fig, ax = plt.subplots(1, 1, figsize = (15, 4))\n",
    "        for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "            if lamb != 1.6:\n",
    "                positive_targets1 = np.load(positive_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "                positive_targets2 = np.load(positive_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "                positive_targets3 = np.load(positive_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "                positive_targets4 = np.load(positive_data_file(phi0, lamb, 12000, 16000, multiplier))\n",
    "                positive_targets5 = np.load(positive_data_file(phi0, lamb, 16000, 20000, multiplier))\n",
    "                negative_targets1 = np.load(negative_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "                negative_targets2 = np.load(negative_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "                negative_targets3 = np.load(negative_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "                negative_targets4 = np.load(negative_data_file(phi0, lamb, 12000, 16000, multiplier))\n",
    "                negative_targets5 = np.load(negative_data_file(phi0, lamb, 16000, 20000, multiplier))\n",
    "                all_sims = np.arange(len(positive_targets1))\n",
    "                positive_targets = [positive_targets1, positive_targets2, positive_targets3, positive_targets4, positive_targets5]\n",
    "                negative_targets = [negative_targets1, negative_targets2, negative_targets3, negative_targets4, negative_targets5]\n",
    "            else:\n",
    "                positive_targets1 = np.load(positive_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "                positive_targets2 = np.load(positive_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "                positive_targets3 = np.load(positive_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "                negative_targets1 = np.load(negative_data_file(phi0, lamb, 0, 4000, multiplier))\n",
    "                negative_targets2 = np.load(negative_data_file(phi0, lamb, 4000, 8000, multiplier))\n",
    "                negative_targets3 = np.load(negative_data_file(phi0, lamb, 8000, 12000, multiplier))\n",
    "                all_sims = np.arange(len(positive_targets1))\n",
    "                positive_targets = [positive_targets1, positive_targets2, positive_targets3]\n",
    "                negative_targets = [negative_targets1, negative_targets2, negative_targets3]\n",
    "\n",
    "                \n",
    "            col = next(colors)\n",
    "            for pos_tg, neg_tg, i in zip(positive_targets, negative_targets, np.arange(len(positive_targets))):\n",
    "                if data != 3 and data != 4:\n",
    "                    correlation_function = np.asarray([correlator(data, pos_tg, neg_tg, all_sims, R, xstep, T, tstep) for R in xrange])\n",
    "                else:\n",
    "                    correlation_function = np.asarray([mixed_correlator(data, pos_tg, neg_tg, all_sims, R, xstep, T, tstep) for R in xrange])\n",
    "                if i != 0:\n",
    "                    ax.plot(xx[:len(xrange)], correlation_function[:len(xrange), 0], color=col, marker='o', ms=3)\n",
    "                else:\n",
    "                    ax.plot(xx[:len(xrange)], correlation_function[:len(xrange), 0], color=col, marker='o', ms=3, label = 'threshold = {:.2f}'.format(threshold))\n",
    "\n",
    "        ax.set(xlabel=r'$r/R_0$', ylabel=r'$\\xi_{pk}(r)$')\n",
    "        ax.legend(bbox_to_anchor=(1, 1))\n",
    "        plt.title('phi0'+str(int(20*np.pi/phi0))+', lambda'+str(int(10*lamb)))\n",
    "        plt.savefig(plots_file+'type'+str(data)+'_spread_of_algs_for_Xstep'+str(xstep)+'_Tstep'+str(tstep)+sim_suffix(phi0, lamb)+'.png')\n",
    "        plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "51\n"
     ]
    }
   ],
   "source": [
    "T = Trange[100]\n",
    "print(T)\n",
    "R = Rrange[10]\n",
    "print(R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_spread(0, Rrange[:100:], xstep, T, tstep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ch = 1000\n",
    "\n",
    "def negative_log_likelihood(params, data):\n",
    "    ''' better alternative using scipy '''\n",
    "    return -stats.poisson.logpmf(data, params[0]).sum()\n",
    "\n",
    "def poisson(x, lamb):\n",
    "#    return stats.poisson.pmf(x, lamb)\n",
    "    return stats.poisson.pmf(x, lamb)\n",
    "\n",
    "for phi0, lamb in zip([2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6], [1.5, 1.5, 1.6]):\n",
    "    fig, ax = plt.subplots(1, len(list_multiplier), figsize = (16, 4))\n",
    "    for multiplier, threshold, j in zip(list_multiplier, list_threshold, np.arange(len(list_multiplier))):\n",
    "        positive_targets, negative_targets, all_sims = import_all_data(lamb, phi0, multiplier)\n",
    "        counter = []\n",
    "        err = correlator(0, positive_targets, negative_targets, all_sims, R, xstep, T, tstep)[-1]\n",
    "        for sim_min in range(0, len(all_sims), ch):\n",
    "            sim_max = sim_min + ch\n",
    "            counter.append(distrib(sim_min, sim_max, 0, positive_targets, negative_targets, all_sims, R, xstep, T, tstep))\n",
    "\n",
    "        # Triage\n",
    "#        counter = [i for i in counter if i != -1]\n",
    "#        counter = [i for i in counter if np.mean(counter)-np.std(counter)*3 < i < np.mean(counter)+np.std(counter)*3]\n",
    "        c = [i for i in counter if np.mean(counter)-np.std(counter)*3 < i < np.mean(counter)+np.std(counter)*3]\n",
    "        data = np.asarray(counter)\n",
    "\n",
    "        # Bin data\n",
    "        bins = np.linspace(min(data), max(data)+1, len(data))\n",
    "        entries, bin_edges, patches = ax[j].hist(data, bins=bins, density=True, label='Data')\n",
    "#        entries, bin_edges = np.histogram(data, bins=bins)\n",
    "        x_plot = 0.5 * (bin_edges[1:] + bin_edges[:-1])\n",
    "#        entries = entries / np.sum(entries)\n",
    "\n",
    "        # Minimize the negative log-Likelihood\n",
    "#        result = sco.minimize(negative_log_likelihood, x0=[1], args=(entries,), method='Powell')\n",
    "#        parameters = result.x\n",
    "#        print(result)\n",
    "\n",
    "        # Best fit to curve\n",
    "        parameters, _ = sco.curve_fit(poisson, x_plot, entries)\n",
    "\n",
    "        # Plot poisson-distribution with fitted parameter\n",
    "        ax[j].plot(x_plot, poisson(x_plot, *parameters), marker='o', linestyle='', label='Fit result')\n",
    "        ax[j].legend()\n",
    "\n",
    "        print('poisson mean on full data', np.sqrt(np.mean(counter)/(len(counter)-1)), 'and without tail', np.sqrt(np.mean(c))/(len(c)-1))\n",
    "        print('stdev of full data', np.std(counter)/np.sqrt(len(counter)-1), 'and without tail', np.std(c)/np.sqrt(len(c)-1), '\\nbest fit poisson param', np.sqrt(*parameters), '\\ngaussian err', err)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Compare algorithms "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for phi0, lamb in zip([2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6], [1.5, 1.5, 1.6]):\n",
    "def empirical_error(data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep, ch):\n",
    "    counter = []\n",
    "    for sim_min in range(0, len(all_sims), ch):\n",
    "        sim_max = sim_min + ch\n",
    "        if data != 3 and data != 4:\n",
    "            counter.append(distrib(sim_min, sim_max, data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep))\n",
    "        else:\n",
    "            counter.append(mixed_distrib(sim_min, sim_max, data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep))            \n",
    "    return np.std(counter)/np.sqrt(len(counter)-1)\n",
    "\n",
    "def compare_algs(data, xstep, T, tstep, ch):\n",
    "    for phi0, lamb in zip([2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6], [1.5, 1.5, 1.6]):\n",
    "        fig, ax = plt.subplots(1, 1, figsize = (14, 5))\n",
    "        for multiplier, threshold, j in zip(list_multiplier, list_threshold, np.arange(len(list_multiplier))):\n",
    "            positive_targets, negative_targets, all_sims = import_all_data(lamb, phi0, multiplier)\n",
    "            rivolo0, emperr = [], []\n",
    "            for R in Rrange:\n",
    "                if data != 3 and data != 4:\n",
    "                    rivolo0.append(correlator(data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep))\n",
    "                    emperr.append(empirical_error(data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep, ch))\n",
    "                else:\n",
    "                    rivolo0.append(mixed_correlator(data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep))\n",
    "                    emperr.append(empirical_error(data, positive_targets, negative_targets, all_sims, R, xstep, T, tstep, ch))\n",
    "                    \n",
    "            rivolo0 = np.asarray(rivolo0)\n",
    "            ax.errorbar(xx, rivolo0[:len(Rrange), 0], yerr=emperr, uplims=True, lolims=True, color=col, label = 'threshold = {:.2f}'.format(threshold))\n",
    "#            ax.errorbar(xx, rivolo0[:len(Rrange), 0], yerr=rivolo0[:len(Rrange), 1], uplims=True, lolims=True, label = 'threshold = {:.2f}'.format(threshold))\n",
    "\n",
    "            if multiplier == 1:\n",
    "                type = '++'\n",
    "                prediction0 = np.load(pickle_corr_location(phi0, lamb, threshold, type)+'.npy')\n",
    "                prediction0 = np.mean(np.asarray(prediction0[:xmax-xstep:]).reshape(-1, int(xstep)), axis=1)\n",
    "                ax.plot(MMxx, prediction0, color='orange', ls='--', label='type'+str(type)+', threshold = {:.2f}'.format(threshold))\n",
    "\n",
    "        ax.set_title('phi0'+str(int(20*np.pi/phi0))+', lambda'+str(int(10*lamb)))\n",
    "        ax.set(xlabel=r'$r/R_0$', ylabel=r'$\\xi_{pk}(r)$')\n",
    "        ax.legend(bbox_to_anchor=(1, 1))\n",
    "        plt.savefig(plots_file+'type'+str(data)+'_compare_algs_for_Xstep'+str(xstep)+'_Tstep'+str(tstep)+sim_suffix(phi0, lamb)+'.png')\n",
    "        plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_algs(0, xstep, T, tstep, ch)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Compare Bubble Correlators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_correlator_functions(xstep, T, tstep):\n",
    "    for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "        for phi0, lamb in zip([2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6], [1.5, 1.5, 1.6]):\n",
    "            positive_targets, negative_targets, all_sims = import_all_data(lamb, phi0, multiplier)\n",
    "\n",
    "            rivolo0 = np.asarray([correlator(0, positive_targets, negative_targets, all_sims, R, xstep, T, tstep) for R in Rrange])\n",
    "            rivolo1 = np.asarray([correlator(1, positive_targets, negative_targets, all_sims, R, xstep, T, tstep) for R in Rrange])\n",
    "            rivolo2 = np.asarray([correlator(2, positive_targets, negative_targets, all_sims, R, xstep, T, tstep) for R in Rrange])\n",
    "            rivolo3 = np.asarray([mixed_correlator(3, positive_targets, negative_targets, all_sims, R, xstep, T, tstep) for R in Rrange])\n",
    "            rivolo4 = np.asarray([mixed_correlator(4, positive_targets, negative_targets, all_sims, R, xstep, T, tstep) for R in Rrange])\n",
    "\n",
    "            fig, ax = plt.subplots(1, 1, figsize = (15, 4))\n",
    "            ax.errorbar(xx, rivolo0[:len(Rrange), 0], yerr=rivolo0[:len(Rrange), 1], color='r', marker='o', ms=3, label=r'$++$')\n",
    "            ax.errorbar(xx, rivolo1[:len(Rrange), 0], yerr=rivolo1[:len(Rrange), 1], color='g', marker='o', ms=3, label=r'$--$')\n",
    "            ax.errorbar(xx, rivolo2[:len(Rrange), 0], yerr=rivolo2[:len(Rrange), 1], color='k', marker='*', ms=3, label=r'$++, --, +-, -+$')\n",
    "            ax.errorbar(xx, rivolo3[:len(Rrange), 0], yerr=rivolo3[:len(Rrange), 1], color='c', marker='*', ms=3, label=r'$+-$')\n",
    "            ax.errorbar(xx, rivolo4[:len(Rrange), 0], yerr=rivolo3[:len(Rrange), 1], color='m', marker='*', ms=3, label=r'$-+$')\n",
    "\n",
    "            ax.set(xlabel=r'$r/R_0$', ylabel=r'$\\xi_{pk}(r)$'); ax.legend(bbox_to_anchor=(1, 1))\n",
    "            plt.title('Bubble nucleation site correlation function; threshold = {:.2f}'.format(threshold))\n",
    "            plt.savefig(plots_file+'bubble_correlator_Xstep'+str(xstep)+'_Tstep'+str(tstep)+'_multiplier'+str(multiplier)+sim_suffix(phi0, lamb)+'.png')\n",
    "            plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot_correlator_functions(xstep, T, tstep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_spacetime_correlator(data, xstep, tstep):\n",
    "    for multiplier, threshold in zip(list_multiplier[::], list_threshold[::]):\n",
    "        fig, ax = plt.subplots(1, 2, figsize = (12, 5))\n",
    "        im = [1, 1]\n",
    "        for phi0, lamb, i in zip([2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6], [1.5, 1.5, 1.6], np.arange(3)):\n",
    "            positive_targets, negative_targets, all_sims = import_all_data(lamb, phi0, multiplier)\n",
    "\n",
    "            matrix = [[-5 for x in range(len(Rrange))] for t in range(len(Trange))]\n",
    "            for T in range(len(Trange)):\n",
    "                for R in range(len(Rrange)):\n",
    "                    a = Rrange[R]\n",
    "                    b = Trange[T]\n",
    "                    if data != 3 and data != 4:\n",
    "                        rivolo0 = correlator(data, positive_targets, negative_targets, all_sims, a, xstep, b, tstep)\n",
    "                    else:\n",
    "                        rivolo0 = mixed_correlator(data, positive_targets, negative_targets, all_sims, a, xstep, b, tstep)\n",
    "                    matrix[T][R] = rivolo0[0]\n",
    "\n",
    "            im[i] = ax[i].imshow(matrix, aspect='auto', interpolation='none', origin='lower', cmap='RdYlBu_r', extent=[Rrange[0], Rrange[-1], Trange[0], Trange[-1]])\n",
    "            ax[i].set(xlabel=r'$r$', ylabel=r'$t$')\n",
    "            clb = plt.colorbar(im[i], ax = ax[i])\n",
    "            clb.ax.set_title(r'$\\xi(r,t)$')\n",
    "            ax[i].title('phi0'+str(int(20*np.pi/phi0))+'_lambda'+str(int(10*lamb)))\n",
    "        plt.suptitle('Correlation function; threshold = {:.2f}'.format(threshold))\n",
    "        plt.savefig(plots_file+'type'+str(data)+'_correlator2D'+str(xstep)+'_Tstep'+str(tstep)+'_multiplier'+str(multiplier)+'.png')\n",
    "        plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_spacetime_correlator(0, xstep, tstep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7 (conda) - recommended",
   "language": "python",
   "name": "python37-conda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
