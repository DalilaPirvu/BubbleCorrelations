{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Find Bubble Nucleation Sites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy as scp\n",
    "import scipy.optimize as sco\n",
    "import scipy.signal as scs\n",
    "from itertools import groupby, cycle\n",
    "import scipy.ndimage\n",
    "from scipy.ndimage import gaussian_filter1d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulation Parameters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "splitdata  [  0 100]\n",
      "lamb =  1.5\n",
      "phi0 =  0.8975979010256552\n",
      "m2eff =  0.01\n",
      "lenLat =  3162.2776601683795\n",
      "dx, dk, spec  0.3860202221885229 0.0019869176531592202 256\n",
      "dtout/dt =  32.0\n",
      "light_cone =  2\n",
      "tcheck = 12\n"
     ]
    }
   ],
   "source": [
    "nLat = 8192\n",
    "nTime = 256\n",
    "nSims = 6000\n",
    "lSim = 3000\n",
    "step = 1000\n",
    "splitdata = np.arange(lSim, nSims+1, step); print('splitdata ', splitdata)\n",
    "\n",
    "filter_size1 =  25.323597831084214*2\n",
    "filter_size2 =  11.768329733973772\n",
    "\n",
    "lamb = 1.5; print('lamb = ', lamb)\n",
    "phi0 = 2*np.pi/7.; print('phi0 = ', phi0)\n",
    "nu = 2.*10**(-3)\n",
    "m2eff = 4. * nu * (- 1. + lamb**2); print('m2eff = ', m2eff)\n",
    "lenLat = 8 * 0.5 * 50. / np.sqrt(2. * nu); print('lenLat = ', lenLat)\n",
    "phi_initial = np.pi\n",
    "\n",
    "nyq = nLat//2+1; spec = nyq//16; dx = lenLat/nLat; dk = 2.*np.pi/lenLat; print('dx, dk, spec ', dx, dk, spec)\n",
    "alpha = 16.; dt = dx/alpha; dtout = dt*nLat/nTime; print('dtout/dt = ', dtout/dt)\n",
    "light_cone = int(dtout/dx); print('light_cone = ', light_cone)\n",
    "nonTime = int(2./np.sqrt(m2eff)/dtout)\n",
    "tcheck = int(1./np.sqrt(m2eff)/dtout); print('tcheck =', tcheck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "instanton_location = '/home/dpirvu/inst/instantons/dev/bubcorr_instanton_sim.dat'\n",
    "suffix = '_for_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'_x'+str(nLat)\n",
    "pickle_location = '/home/dpirvu/pickle_location/new_new_bubble_correlations/phi0'+str(int(20*np.pi/phi0))+'_lambda'+str(int(10*lamb))+'/'\n",
    "\n",
    "def sim_location(sim):\n",
    "    return '/gpfs/dpirvu/bubble_correlations/t'+str(nTime)+'_x'+str(nLat)+'_len{:.4f}'.format(lenLat)+'_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'_alph{:.4f}'.format(alpha)+'_spec'+str(spec)+'_sim'+str(sim)+'_fields.dat'\n",
    "def positive_data_file(minSim, maxSim, multiplier, filter):\n",
    "    return pickle_location+'positive_targets_sims'+str(minSim)+'_to'+str(maxSim-1)+'_multiplier'+str(multiplier)+'_filter{:.4f}'.format(filter)+suffix+'.npy'\n",
    "def negative_data_file(minSim, maxSim, multiplier, filter):\n",
    "    return pickle_location+'negative_targets_sims'+str(minSim)+'_to'+str(maxSim-1)+'_multiplier'+str(multiplier)+'_filter{:.4f}'.format(filter)+suffix+'.npy'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.314534070006756\n",
      "[4.759673735059503, 4.861241173200842, 4.962808611342181]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def V(phi, lamb=1.5):\n",
    "    return ( -np.cos(phi) + 0.5 * lamb**2 * np.sin(phi)**2 ) * 4 * nu\n",
    "right_phi_at_V_max = sco.minimize_scalar(lambda x: -V(x), bounds=[np.pi, 2*np.pi], method='bounded')\n",
    "far_right_phi_at_V_max = sco.minimize_scalar(lambda x: -V(x), bounds=[2*np.pi, 3*np.pi], method='bounded'); print(far_right_phi_at_V_max.x)\n",
    "def F(x):\n",
    "    return V(x) - V(np.pi)\n",
    "phi_upper_bound = sco.fsolve(F, 5.5)[0]\n",
    "\n",
    "list_multiplier, list_threshold= [], []\n",
    "for multiplier in [0.25, 0.3, 0.35]:\n",
    "    threshold = right_phi_at_V_max.x + np.abs(right_phi_at_V_max.x-2*phi_initial)*multiplier\n",
    "    list_multiplier.append(multiplier)\n",
    "    list_threshold.append(threshold)\n",
    "print(list_threshold)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(7,4))\n",
    "plt.plot([i for i in np.arange(-np.pi/2, 3.5*phi_initial, phi_initial/100)], [V(i) for i in np.arange(-np.pi/2, 3.5*phi_initial, phi_initial/100)])\n",
    "[plt.plot(i, V(i), 'ro', ms = 7) for i in list_threshold[:3]]\n",
    "[plt.plot(i, V(i), 'go', ms = 7) for i in list_threshold[3:]]\n",
    "ax.tick_params(direction='in', width='1')\n",
    "plt.plot(3*np.pi, V(3*np.pi), 'ko')\n",
    "plt.plot(right_phi_at_V_max.x, V(right_phi_at_V_max.x), 'bo')\n",
    "plt.plot(far_right_phi_at_V_max.x, V(far_right_phi_at_V_max.x), 'ko')\n",
    "plt.xlabel(r'$\\phi$', fontsize=14); plt.ylabel(r'$V(\\phi)$', fontsize=14); plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def weave(list1,list2):\n",
    "    lijst = []\n",
    "    i = 0\n",
    "    while i < len(list1):\n",
    "        lijst.append(list1[i])\n",
    "        lijst.append(list2[i]) \n",
    "        i += 1\n",
    "    return lijst\n",
    "\n",
    "def find_peak_positions(slice, threshold):\n",
    "    \"\"\" Finds x coordinate of peaks in masked field with mask applied at threshold. \"\"\"\n",
    "    peak_coord = scs.find_peaks(slice, height = threshold)[0].tolist()\n",
    "    if slice[-1] >= threshold and slice[0] >= threshold and slice[-1] != slice[0]:\n",
    "        if slice[0] > slice[-1] and slice[0] > slice[1]:\n",
    "            peak_coord.append(0)\n",
    "        elif slice[0] < slice[-1] and slice[-1] > slice[-2]:\n",
    "            peak_coord.append(len(slice)-1) # this minds potential boundary discontinuities\n",
    "    return np.asarray(peak_coord)\n",
    "\n",
    "def identify_bubble_sites(simulation, bubble_thr, filter):\n",
    "    if filter == filter_size2:\n",
    "        factor = 3\n",
    "    elif filter == filter_size1:\n",
    "        factor = 1\n",
    "    nvals, new_vals = 0, 0\n",
    "    vals, times = [], []\n",
    "    for t in range(nTime - int(tcheck//3)):\n",
    "        # find new peaks in field and check if they are good bubble candidates\n",
    "        peaks_new = find_peak_positions(simulation[t], bubble_thr)\n",
    "        if peaks_new is not None:\n",
    "            for pk in peaks_new:\n",
    "                target_bounds = []\n",
    "                for v in range(len(vals)):\n",
    "                    # ensure new peaks are not in the light cone of the previously identified bubble nucleation sites\n",
    "                    target_bounds += [i%nLat for i in range(vals[v] - np.abs(t - times[v])*light_cone, vals[v] + np.abs(t - times[v])*light_cone + 1)]\n",
    "                    # discard element if within smoothing scale of others detected\n",
    "                    target_bounds += [i%nLat for i in range(vals[v] - factor*np.int(np.ceil(filter)), vals[v] + factor*np.int(np.ceil(filter)))]\n",
    "                if pk not in target_bounds:\n",
    "                    vals.append(pk)\n",
    "                    times.append(t)\n",
    "\n",
    "                # discard element if future lightcone is not in tv\n",
    "                if len(vals) > nvals:\n",
    "                    for temp in range(times[-1], min(times[-1]+tcheck, nTime)):\n",
    "                        boolShoot = False\n",
    "                        deltat = temp-1 - times[-1]\n",
    "                        for xemp in range(vals[-1] - deltat*light_cone, vals[-1] + deltat*light_cone + 1):\n",
    "                            if not (bubble_thr < simulation[temp][xemp%nLat] < far_right_phi_at_V_max.x):#3*phi_initial):\n",
    "                                vals = np.delete(np.asarray(vals), -1).tolist()\n",
    "                                times = np.delete(np.asarray(times), -1).tolist()\n",
    "                                boolShoot = True\n",
    "                                break\n",
    "                        if boolShoot:\n",
    "                            break\n",
    "                \n",
    "#                if len(vals) > nvals:\n",
    "#                    if any(simulation[pastt][vals[-1]] < 0 for pastt in range(times[-1])):\n",
    "#                        vals = np.delete(np.asarray(vals), -1).tolist()\n",
    "#                        times = np.delete(np.asarray(times), -1).tolist()\n",
    "\n",
    "                if len(vals) > nvals: #crucial check here\n",
    "                    bubbles = find_bubbles_at_t(simulation[t], bubble_thr)\n",
    "                    nBubbles = len(bubbles)\n",
    "                    bub_list, rmvlist = [], []\n",
    "                    for v in range(nvals):\n",
    "                        for index in range(nBubbles):\n",
    "                             if (vals[v] in bubbles[index]):\n",
    "                                bub_list.append(index)\n",
    "                    bubbles_dup = [bubbles[index] for index in range(nBubbles) if index in set(bub_list)]\n",
    "                    if bubbles_dup != []:\n",
    "                        for bounds in bubbles_dup:\n",
    "                            for c in range(nvals, len(vals)):\n",
    "                                if (vals[c] in bounds):\n",
    "                                    rmvlist.append(c)\n",
    "                    if len(rmvlist) > 0:\n",
    "                        vals = np.delete(np.asarray(vals), rmvlist).tolist()\n",
    "                        times = np.delete(np.asarray(times), rmvlist).tolist()\n",
    "\n",
    "                nvals = len(vals)\n",
    "    newlist = []\n",
    "    for v in range(len(times)):\n",
    "        if times[v] < nonTime:\n",
    "            newlist.append(v)\n",
    "    vals = np.delete(np.asarray(vals), newlist).tolist()\n",
    "    times = np.delete(np.asarray(times), newlist).tolist()\n",
    "    return [[times[i], vals[i]] for i in range(len(vals))]\n",
    "\n",
    "def find_bubbles_at_t(field_slice, bubble_thr):\n",
    "    bubbles, mids = [], []\n",
    "    vals = [x if field_slice[x] > right_phi_at_V_max.x else 0 for x in range(len(field_slice))]\n",
    "    first_zero = next((i for i, x in enumerate(vals) if x == 0.), 0)\n",
    "    vals = np.roll(vals, -first_zero)\n",
    "    bubbles = [list(g) for k, g in groupby(vals, lambda x: x != 0) if k]\n",
    "    for bubble in bubbles:\n",
    "        if bubble[0] <= bubble[-1]:\n",
    "            aa = np.arange(bubble[0], bubble[-1]+1)\n",
    "        elif bubble[0] > bubble[-1]:\n",
    "            bubble[0] = bubble[0]-nLat\n",
    "            aa = np.arange(bubble[0], bubble[-1]+1)%nLat\n",
    "        mids.append(aa)\n",
    "    return mids\n",
    "\n",
    "def all_bubble_sites(data, bubble_thr, filter):\n",
    "    return [identify_bubble_sites(simulation, bubble_thr, filter) for simulation in data]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'splitdata' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-44586d81e7d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplitdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplitdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mall_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenfromtxt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msim_location\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnTime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnLat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mfilter\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfilter_size1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter_size2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'For sims '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m' to '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'and filter size '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'splitdata' is not defined"
     ]
    }
   ],
   "source": [
    "for minSim, maxSim in zip(splitdata, splitdata[1:]):\n",
    "    all_data = np.asarray([np.reshape(np.genfromtxt(sim_location(sim)), (nTime, nLat)) for sim in range(minSim, maxSim)])\n",
    "\n",
    "    for filter in [filter_size1, filter_size2]:\n",
    "        print('For sims ', minSim, ' to ', maxSim, 'and filter size ', filter)\n",
    "        \n",
    "        data_pos = np.asarray([[gaussian_filter1d(slice, sigma=filter, mode='wrap') for slice in simulation] for simulation in all_data])\n",
    "        data_neg = np.asarray([[2*phi_initial - np.asarray(j) for j in i] for i in data_pos])\n",
    "\n",
    "        targets_pos, targets_neg = [], []\n",
    "        for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "            targets_pos.append(all_bubble_sites(data_pos, threshold, filter))\n",
    "            print('multiplier :', multiplier, 'positive targets', len([item for sublist in targets_pos[-1] for item in sublist]))\n",
    "\n",
    "        for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "            targets_neg.append(all_bubble_sites(data_neg, threshold, filter))\n",
    "            print('multiplier :', multiplier, 'negative targets', len([item for sublist in targets_neg[-1] for item in sublist]))\n",
    "\n",
    "        for sim in range(len(targets_pos[0])):\n",
    "            for i in reversed(range(len(targets_pos[0][sim]))):\n",
    "                if targets_pos[0][sim][i] in targets_pos[1][sim] and targets_pos[0][sim][i] in targets_pos[2][sim]:\n",
    "                    del targets_pos[1][sim][targets_pos[1][sim].index(targets_pos[0][sim][i])]\n",
    "                    del targets_pos[2][sim][targets_pos[2][sim].index(targets_pos[0][sim][i])]\n",
    "                    del targets_pos[0][sim][i]\n",
    "                    break\n",
    "\n",
    "        for sim in range(len(targets_neg[0])):\n",
    "            for i in reversed(range(len(targets_neg[0][sim]))):\n",
    "                if targets_neg[0][sim][i] in targets_neg[1][sim] and targets_neg[0][sim][i] in targets_neg[2][sim]:\n",
    "                    del targets_neg[1][sim][targets_neg[1][sim].index(targets_neg[0][sim][i])]\n",
    "                    del targets_neg[2][sim][targets_neg[2][sim].index(targets_neg[0][sim][i])]\n",
    "                    del targets_neg[0][sim][i]\n",
    "                    break\n",
    "\n",
    "        [print(len([item for sublist in targets_pos[mm] for item in sublist])) for mm in range(len(list_multiplier))]\n",
    "        [print(len([item for sublist in targets_neg[mm] for item in sublist])) for mm in range(len(list_multiplier))]\n",
    "\n",
    "#        for sim in range(len(data_pos)):\n",
    "#            fig, ax = plt.subplots(1, 1, figsize = (25, 4))\n",
    "#            colors = cycle(('b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'))\n",
    "#            for multiplier, threshold,kkk in zip(list_multiplier, list_threshold, np.arange(len(list_multiplier))):\n",
    "#                col = next(colors)\n",
    "#                targets = targets_pos[kkk][sim]\n",
    "#                print('for multiplier = ', multiplier, 'there are', len(targets), col, 'bubbles at (t, x):', targets)\n",
    "#                for tg in targets:\n",
    "#                    ax.plot(tg[1], tg[0], color=col, linestyle=\"None\", marker = '+', ms=10)\n",
    "#            im = ax.imshow(data_pos[sim], aspect='auto', interpolation='none', origin='lower')\n",
    "#            clb = plt.colorbar(im, ax = ax); clb.set_label(r'$\\phi(x)$', labelpad=-28, y=1.08, rotation=0)\n",
    "#            ax.set(xlabel = r'$x$', ylabel = r'$t$'); plt.show()\n",
    "\n",
    "        for jj in range(len(list_multiplier)):                   \n",
    "            np.save(positive_data_file(minSim, maxSim, list_multiplier[jj], filter), targets_pos[jj])\n",
    "            np.save(negative_data_file(minSim, maxSim, list_multiplier[jj], filter), targets_neg[jj])\n",
    "\n",
    "        print('Done.')\n",
    "        del data_pos, data_neg, targets_pos, targets_neg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7 (conda) - recommended",
   "language": "python",
   "name": "python37-conda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
