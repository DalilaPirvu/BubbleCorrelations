{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bubble Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import statistics as stat\n",
    "import matplotlib\n",
    "from matplotlib import gridspec\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy as scp\n",
    "import scipy.optimize as sco\n",
    "import scipy.signal as scs\n",
    "from itertools import cycle\n",
    "import random\n",
    "from mpl_toolkits.axes_grid1 import ImageGrid\n",
    "from matplotlib import ticker\n",
    "from collections import OrderedDict\n",
    "import matplotlib.colors as mcolors\n",
    "import scipy.ndimage\n",
    "from scipy.ndimage import gaussian_filter1d\n",
    "\n",
    "np_load_old = np.load\n",
    "np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulation Parameters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "splitdata  [    0  1000  2000  3000  4000  5000  6000  7000  8000  9000 10000 11000\n",
      " 12000 13000 14000 15000 16000 17000 18000 19000 20000]\n",
      "lenLat =  3162.2776601683795\n",
      "dx, dk, spec  0.3860202221885229 0.0019869176531592202 256\n",
      "dtout/dt =  32.0\n",
      "light_cone =  2\n",
      "units =  2.0\n"
     ]
    }
   ],
   "source": [
    "nLat = 8192\n",
    "nTime = 256\n",
    "nSims = 20000\n",
    "nSims0 = 0\n",
    "simStep = 2000\n",
    "splitdata = np.arange(nSims0, nSims+1, 1000); print('splitdata ', splitdata)\n",
    "\n",
    "nu = 2.*10**(-3)\n",
    "lenLat = 8 * 0.5 * 50. / np.sqrt(2. * nu); print('lenLat = ', lenLat)\n",
    "def m2eff(lamb):\n",
    "    return 4. * nu * (- 1. + lamb**2)\n",
    "\n",
    "phi_initial = np.pi\n",
    "nyq = nLat//2+1; spec = nyq//16; dx = lenLat/nLat; dk = 2.*np.pi/lenLat; print('dx, dk, spec ', dx, dk, spec)\n",
    "alpha = 16.; dt = dx/alpha; dtout = dt*nLat/nTime; print('dtout/dt = ', dtout/dt)\n",
    "light_cone = int(dtout/dx); print('light_cone = ', light_cone)\n",
    "unit_conv = nLat/nTime/alpha; print('units = ', unit_conv)\n",
    "def tTime(lamb):\n",
    "    return nTime - int(int(2/np.sqrt(m2eff(lamb)))/dtout)\n",
    "#tcheck = int(1/np.sqrt(m2eff)/dtout); print('tcheck =', tcheck)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "plots_file = '/home/dpirvu/big_plot_file/new_bubble_correlations/'\n",
    "pickle_file = '/home/dpirvu/pickle_location/new_bubble_correlations/'\n",
    "\n",
    "def sim_location(sim):\n",
    "    return '/gpfs/dpirvu/bubble_correlations/t'+str(nTime)+'_x'+str(nLat)+'_len{:.4f}'.format(lenLat)+'_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'_alph{:.4f}'.format(alpha)+'_spec'+str(spec)+'_sim'+str(sim)+'_fields.dat'\n",
    "def sim_suffix(phi0, lamb):\n",
    "    return '_for_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'_x'+str(nLat)\n",
    "def pickle_location(phi0, lamb):\n",
    "    return pickle_file + 'phi0'+str(int(20*np.pi/phi0))+'_lambda'+str(int(10*lamb))+'/'\n",
    "def pickle_corr_location(phi0, lamb, type):\n",
    "    return pickle_file + 'th_correlator_type'+type+'_phi0'+str(int(20*np.pi/phi0))+'_lambda'+str(int(10*lamb))\n",
    "def thrcorr_file(type, threshold, phi0, lamb):\n",
    "    return pickle_file+'thcorr_type'+str(type)+'_threshold'+str(threshold)+'_for_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'.npy'\n",
    "\n",
    "def data_file_1D(data_vec, xstep, multiplier, filter):\n",
    "    x = ''\n",
    "    for type in data_vec:\n",
    "        x += str(type)\n",
    "    return pickle_file+'1d_type'+x+'_xstep'+str(xstep)+'_multiplier'+str(multiplier)+'_filter{:.4f}'.format(filter)+'.npy'\n",
    "def data_file_2D(type, xstep, multiplier, filter):\n",
    "    return pickle_file+'2d_type'+str(type)+'_xstep'+str(xstep)+'_multiplier'+str(multiplier)+'_filter{:.4f}'.format(filter)+'.npy'\n",
    "def data_file2_2D(type, xstep, phi0, lamb, filter):\n",
    "    return pickle_file+'2d_type'+str(type)+'_xstep'+str(xstep)+'_for_phi0{:.4f}'.format(phi0)+'_lamb{:.4f}'.format(lamb)+'_filter{:.4f}'.format(filter)+'.npy'\n",
    "\n",
    "def positive_data_file(phi0, lamb, minSim, maxSim, multiplier, filter):\n",
    "    pickle = pickle_location(phi0, lamb)\n",
    "    suffix = sim_suffix(phi0, lamb)\n",
    "    return pickle+'positive_targets_sims'+str(minSim)+'_to'+str(maxSim-1)+'_multiplier'+str(multiplier)+'_filter{:.4f}'.format(filter)+suffix+'.npy'\n",
    "def negative_data_file(phi0, lamb, minSim, maxSim, multiplier, filter):\n",
    "    pickle = pickle_location(phi0, lamb)\n",
    "    suffix = sim_suffix(phi0, lamb)\n",
    "    return pickle+'negative_targets_sims'+str(minSim)+'_to'+str(maxSim-1)+'_multiplier'+str(multiplier)+'_filter{:.4f}'.format(filter)+suffix+'.npy'\n",
    "\n",
    "def round_to_n(x, n):\n",
    "    return x if x == 0 else round(x, -int(math.floor(math.log10(abs(x)))) + (n - 1))\n",
    "\n",
    "def import_all_data(lamb, phi0, multiplier, filter):\n",
    "    postlist = np.concatenate(tuple([np.load(positive_data_file(phi0, lamb, minSim, maxSim, multiplier, filter)) for minSim, maxSim in zip(splitdata, splitdata[1:])]))\n",
    "    negtlist = np.concatenate(tuple([np.load(negative_data_file(phi0, lamb, minSim, maxSim, multiplier, filter)) for minSim, maxSim in zip(splitdata, splitdata[1:])]))\n",
    "    return postlist, negtlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.759673735059503, 4.861241173200842, 4.962808611342181]\n",
      "[4.48464151 4.76614382 5.04764612]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def V(phi, lamb=1.5):\n",
    "    return ( -np.cos(phi) + 0.5 * lamb**2 * np.sin(phi)**2 ) * 4 * nu\n",
    "right_phi_at_V_max = sco.minimize_scalar(lambda x: -V(x), bounds=[np.pi, 2*np.pi], method='bounded')\n",
    "\n",
    "list_multiplier, list_threshold= [], []\n",
    "list_type = ['++', '--', '++--', '+-', '-+']\n",
    "thcorr = ['++', 'foo', '++--', '+-', 'foo']\n",
    "list_title_type = [r'$\\xi^{++}_{bb}(\\bar{r},\\bar{t})$', r'$\\xi^{--}_{bb}(\\bar{r},\\bar{t})$', r'$\\xi^{overall}_{bb}(\\bar{r},\\bar{t})$', r'$\\xi^{+-}_{bb}(\\bar{r},\\bar{t})$', r'$\\xi^{-+}_{bb}(\\bar{r},\\bar{t})$']\n",
    "\n",
    "list_phi0 = [2*np.pi/6.6, 2*np.pi/7., 2*np.pi/6.6][::]\n",
    "list_lamb = [1.5, 1.5, 1.6][::]\n",
    "filter_size1 = 50.64719566216843/2.\n",
    "#filter_size1 = 51.46399881629844\n",
    "filter_size2 = 11.768329733973772\n",
    "list_filter = [filter_size1, filter_size2]\n",
    "\n",
    "list_multiplier, list_threshold= [], []\n",
    "for multiplier in [0.25, 0.3, 0.35]:\n",
    "    threshold = right_phi_at_V_max.x + np.abs(right_phi_at_V_max.x-2*phi_initial)*multiplier\n",
    "    list_multiplier.append(multiplier)\n",
    "    list_threshold.append(threshold)\n",
    "print(list_threshold)\n",
    "sigma0 = 0.360805\n",
    "print((np.asarray(list_threshold)-np.pi)/sigma0)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(7,4))\n",
    "plt.plot([i for i in np.arange(-np.pi/2, 3.5*phi_initial, phi_initial/100)], [V(i) for i in np.arange(-np.pi/2, 3.5*phi_initial, phi_initial/100)])\n",
    "[plt.plot(i, V(i), 'o', ms = 7) for i in list_threshold]\n",
    "ax.tick_params(direction='in', width='1')\n",
    "plt.plot(3*np.pi, V(3*np.pi), 'ko')\n",
    "plt.xlabel(r'$\\phi$', fontsize=14); plt.ylabel(r'$V(\\phi)$', fontsize=14); plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def correlator(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT):\n",
    "    DCorrelator = []\n",
    "    if data == 0:\n",
    "        allTargets = PositiveTargets + NegativeTargets\n",
    "    elif data == 1:\n",
    "        allTargets = [PositiveTargets[sim] + NegativeTargets[sim] for sim in range(len(PositiveTargets))]\n",
    "\n",
    "    for sim in range(len(allTargets)):\n",
    "        bubbleCoords = np.asarray(allTargets[sim])\n",
    "        nBubbles = len(bubbleCoords)\n",
    "        bubNDens = nBubbles / (nLat * tTime(lamb))\n",
    "        area = 2 * np.abs(RR-R) * np.abs(TT-T)\n",
    "        bubCounter, normBubbles = 0., 0.\n",
    "\n",
    "        if nBubbles > 0:\n",
    "            for bubloc in range(nBubbles):\n",
    "                bdt = bubbleCoords[bubloc,0] - bubbleCoords[:,0]\n",
    "                bdx = np.abs(bubbleCoords[bubloc,1] - bubbleCoords[:,1])\n",
    "                bdx = [ww if ww < nLat//2 else nLat - ww for ww in bdx]\n",
    "                normBubbles += len([l for l in range(len(bdx)) if (T <= bdt[l] < TT)])\n",
    "                bubCounter += len([l for l in range(len(bdx)) if (R <= bdx[l] < RR and T <= bdt[l] < TT)])\n",
    "            DCorrelator.append( bubCounter / (bubNDens * area * normBubbles))\n",
    "    return np.nanmean(DCorrelator) - 1.\n",
    "\n",
    "def mixed_correlator(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT):\n",
    "    DCorrelator = []\n",
    "    for sim in range(len(PositiveTargets)):\n",
    "        posBubbleCoords = np.asarray(PositiveTargets[sim])\n",
    "        negBubbleCoords = np.asarray(NegativeTargets[sim])\n",
    "        nPosBubbles, nNegBubbles = len(posBubbleCoords), len(negBubbleCoords)\n",
    "        area = 2 * np.abs(RR-R) * np.abs(TT-T) / (nLat * tTime(lamb))\n",
    "        bubCounter, normBubbles = 0., 0.\n",
    "\n",
    "        if nPosBubbles > 0 and nNegBubbles > 0:\n",
    "            if data == 2:\n",
    "                for bubloc in range(nPosBubbles):\n",
    "                    pbdt = posBubbleCoords[bubloc,0] - negBubbleCoords[:,0]\n",
    "                    pbdx = np.abs(posBubbleCoords[bubloc,1] - negBubbleCoords[:,1])\n",
    "                    pbdx = [ww if ww < nLat//2 else nLat - ww for ww in pbdx]\n",
    "                    normBubbles += len([l for l in range(len(pbdx)) if (T <= pbdt[l] < TT)])\n",
    "                    bubCounter += len([l for l in range(len(pbdx)) if (R <= pbdx[l] < RR and T <= pbdt[l] < TT)])\n",
    "                DCorrelator.append( bubCounter / ((nNegBubbles+1.) * area * normBubbles))#nPosBubbles) )\n",
    "\n",
    "            elif data == 3:\n",
    "                for bubloc in range(nNegBubbles):\n",
    "                    nbdt = negBubbleCoords[bubloc,0] - posBubbleCoords[:,0]\n",
    "                    nbdx = np.abs(negBubbleCoords[bubloc,1] - posBubbleCoords[:,1])\n",
    "                    nbdx = [ww if ww < nLat//2 else nLat - ww for ww in nbdx]\n",
    "                    normBubbles += len([l for l in range(len(nbdx)) if (T <= nbdt[l] < TT)])\n",
    "                    bubCounter += len([l for l in range(len(nbdx)) if (R <= nbdx[l] < RR and T <= nbdt[l] < TT)])\n",
    "                DCorrelator.append( bubCounter / ((nPosBubbles+1.) * area * normBubbles))#nNegBubbles) )\n",
    "    return np.nanmean(DCorrelator) - 1.\n",
    "    \n",
    "def empirical_corr_and_err(data, lamb, phi0, multiplier, filter, R, RR, T, TT, simStep):\n",
    "    counter = []\n",
    "    PositiveTargets, NegativeTargets = import_all_data(lamb, phi0, multiplier, filter)\n",
    "    batches = np.arange(0, len(PositiveTargets), simStep)\n",
    "    for sim_min, sim_max in zip(batches[:-1:], batches[1:]):\n",
    "        if data not in [2, 3]:\n",
    "            counter.append(correlator(lamb, data, PositiveTargets[sim_min:sim_max], NegativeTargets[sim_min:sim_max], R, RR, T, TT))\n",
    "        else:\n",
    "            counter.append(mixed_correlator(lamb, data, PositiveTargets[sim_min:sim_max], NegativeTargets[sim_min:sim_max], R, RR, T, TT))\n",
    "    return np.nanmean(counter), stat.stdev(counter)/np.sqrt(len(counter))\n",
    "\n",
    "def correlation_functions(multiplier, threshold, filter, data_vec, xrange, T, TT, simStep):\n",
    "    corr_vec = []\n",
    "    for phi0, lamb in zip(list_phi0, list_lamb):\n",
    "        corr_vec.append([])\n",
    "        for data in data_vec:\n",
    "            res = [empirical_corr_and_err(data, lamb, phi0, multiplier, filter, R, RR, T, TT, simStep) for R, RR in zip(xrange[:-1:], xrange[1:])]\n",
    "            corr_vec[-1].append(res)\n",
    "    return np.asarray(corr_vec)\n",
    "\n",
    "def spacetime_correlator(multiplier, threshold, filter, data, xrange, trange):\n",
    "    valmin, valmax = 0, 0\n",
    "    matrix_vec = []\n",
    "    for phi0, lamb in zip(list_phi0, list_lamb):\n",
    "        PositiveTargets, NegativeTargets = import_all_data(lamb, phi0, multiplier, filter)\n",
    "        matrix = np.asarray([[-1]*len(xrange)]*len(trange))\n",
    "        for tind in range(len(trange[:-1])):\n",
    "            T, TT = trange[:-1][tind], trange[1:][tind]\n",
    "            for xind in range(len(xrange[:-1])):\n",
    "                R, RR = xrange[:-1][xind], xrange[1:][xind]\n",
    "                if data not in [2, 3]:\n",
    "                    corr_func = correlator(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT)\n",
    "                else:\n",
    "                    corr_func = mixed_correlator(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT)\n",
    "                matrix[trange[tind], xrange[xind]] = corr_func\n",
    "        matrix_vec.append(matrix)\n",
    "    return np.asarray(matrix_vec)\n",
    "\n",
    "def spacetime_correlator2(phi0, lamb, filter, data, xrange, trange):\n",
    "    valmin, valmax = 0, 0\n",
    "    matrix_vec = []\n",
    "    for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "        PositiveTargets, NegativeTargets = import_all_data(lamb, phi0, multiplier, filter)\n",
    "        matrix = np.asarray([[-1]*len(xrange)]*len(trange))\n",
    "        for tind in range(len(trange[:-1])):\n",
    "            T, TT = trange[:-1][tind], trange[1:][tind]\n",
    "            for xind in range(len(xrange[:-1])):\n",
    "                R, RR = xrange[:-1][xind], xrange[1:][xind]\n",
    "                if data not in [2, 3]:\n",
    "                    corr_func = correlator(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT)\n",
    "                else:\n",
    "                    corr_func = mixed_correlator(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT)\n",
    "                matrix[trange[tind], xrange[xind]] = corr_func\n",
    "        matrix_vec.append(matrix)\n",
    "    return np.asarray(matrix_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Rrange(min, max, step):\n",
    "    return np.arange(min, max+1, step)\n",
    "def Trange(min, max, step):\n",
    "    return np.arange(min, max+1, step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "xmin = 1\n",
    "list_xmax = [nLat//2, nLat//2]\n",
    "list_xstep = [20, 10]\n",
    "\n",
    "Tmin = -5\n",
    "Tmax = 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cm/shared/apps/conda-environments/python37/lib/python3.7/site-packages/ipykernel_launcher.py:42: RuntimeWarning: invalid value encountered in double_scalars\n",
      "/cm/shared/apps/conda-environments/python37/lib/python3.7/site-packages/ipykernel_launcher.py:51: RuntimeWarning: invalid value encountered in double_scalars\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-0773eaa63634>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_multiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_threshold\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mdata_vec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0mcorr_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcorrelation_functions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_vec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msimStep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file_1D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_vec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcorr_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Done'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-5-6f10d6007e73>\u001b[0m in \u001b[0;36mcorrelation_functions\u001b[0;34m(multiplier, threshold, filter, data_vec, xrange, T, TT, simStep)\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0mcorr_vec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_vec\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mempirical_corr_and_err\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msimStep\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRR\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxrange\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxrange\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m             \u001b[0mcorr_vec\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr_vec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-5-6f10d6007e73>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0mcorr_vec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_vec\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mempirical_corr_and_err\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msimStep\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRR\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxrange\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxrange\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m             \u001b[0mcorr_vec\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr_vec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-5-6f10d6007e73>\u001b[0m in \u001b[0;36mempirical_corr_and_err\u001b[0;34m(data, lamb, phi0, multiplier, filter, R, RR, T, TT, simStep)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msim_min\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msim_max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatches\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatches\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m             \u001b[0mcounter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrelator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPositiveTargets\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msim_min\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msim_max\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNegativeTargets\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msim_min\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msim_max\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0mcounter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmixed_correlator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPositiveTargets\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msim_min\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msim_max\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNegativeTargets\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msim_min\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msim_max\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-5-6f10d6007e73>\u001b[0m in \u001b[0;36mcorrelator\u001b[0;34m(lamb, data, PositiveTargets, NegativeTargets, R, RR, T, TT)\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnBubbles\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mbubloc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnBubbles\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m                 \u001b[0mbdt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbubbleCoords\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbubloc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbubbleCoords\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m                 \u001b[0mbdx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbubbleCoords\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbubloc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbubbleCoords\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m                 \u001b[0mbdx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mww\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mww\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnLat\u001b[0m\u001b[0;34m//\u001b[0m\u001b[0;36m2\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mnLat\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mww\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mww\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbdx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "for smoothing, xstep, xmax in zip(list_filter[::], list_xstep[::], list_xmax[::]):\n",
    "    xrange = Rrange(xmin, xmax, xstep)\n",
    "    for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "        data_vec = [0,1,2,3]\n",
    "        corr_data = correlation_functions(multiplier, threshold, smoothing, data_vec, xrange, Tmin, Tmax, simStep)\n",
    "        np.save(data_file_1D(data_vec, xstep, multiplier, smoothing), corr_data)\n",
    "        print('Done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "xmax = 512\n",
    "xmin = 1\n",
    "xstep = 10\n",
    "xrange = Rrange(xmin, xmax, xstep)\n",
    "\n",
    "tmax = 51\n",
    "tmin = -50\n",
    "tstep = 2\n",
    "trange = Trange(tmin, tmax, tstep)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cm/shared/apps/conda-environments/python37/lib/python3.7/site-packages/ipykernel_launcher.py:22: RuntimeWarning: invalid value encountered in double_scalars\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done\n",
      "Done\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-44-39f402d73e0c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_multiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_threshold\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#,1,2,3]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m             \u001b[0mcorr_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspacetime_correlator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxrange\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrange\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;31m#            np.save(data_file_2D(data, xstep, multiplier, smoothing), corr_data)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Done'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-41-b219d23da86d>\u001b[0m in \u001b[0;36mspacetime_correlator\u001b[0;34m(multiplier, threshold, filter, data, xrange, trange)\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[0mmatrix_vec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_lamb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m         \u001b[0mPositiveTargets\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNegativeTargets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimport_all_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m         \u001b[0mmatrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxrange\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrange\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtind\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrange\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-3-d3b4cfb7df17>\u001b[0m in \u001b[0;36mimport_all_data\u001b[0;34m(lamb, phi0, multiplier, filter)\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mimport_all_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m     \u001b[0mpostlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpositive_data_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplitdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplitdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m     \u001b[0mnegtlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnegative_data_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplitdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplitdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mpostlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnegtlist\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-3-d3b4cfb7df17>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mimport_all_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m     \u001b[0mpostlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpositive_data_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplitdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplitdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m     \u001b[0mnegtlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnegative_data_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mminSim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxSim\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplitdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplitdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mpostlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnegtlist\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-1-ae585ba116a3>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*a, **k)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mnp_load_old\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp_load_old\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_pickle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    434\u001b[0m         \u001b[0m_ZIP_SUFFIX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mb'PK\\x05\\x06'\u001b[0m \u001b[0;31m# empty zip files start with this\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    435\u001b[0m         \u001b[0mN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMAGIC_PREFIX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 436\u001b[0;31m         \u001b[0mmagic\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    437\u001b[0m         \u001b[0;31m# If the file size is less than N, we need to make sure not\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    438\u001b[0m         \u001b[0;31m# to seek past the beginning of the file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "for smoothing in list_filter:\n",
    "    for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "        for data in [0]:#,1,2,3]:\n",
    "            corr_data = spacetime_correlator(multiplier, threshold, smoothing, data, xrange, trange)\n",
    "            np.save(data_file_2D(data, xstep, multiplier, smoothing), corr_data)\n",
    "            print('Done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for smoothing in list_filter:\n",
    "    for phi0, lamb in zip(list_phi0, list_lamb):\n",
    "        for data in [0]:#,1,2,3]:\n",
    "            corr_data = spacetime_correlator2(phi0, lamb, smoothing, data, xrange, trange)\n",
    "            np.save(data_file2_2D(data, xstep, phi0, lamb, smoothing), corr_data)\n",
    "            print('Done')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "tableau1 = [(50, 162, 81), (172,217,141), (255,127,15), (255,185,119), (60,183,204), (152,217,228), (184,90,13), (255,217,74), (57,115,124), (134,180,169), (130,133,59), (204,201,77)]\n",
    "for i in range(len(tableau1)):\n",
    "    r, g, b = tableau1[i]    \n",
    "    tableau1[i] = (r / 255., g / 255., b / 255.)\n",
    "\n",
    "tableau2 = [(44,105,176), (181,200,226), (240,39,32), (255,182,176), (172,97,60), (233,195,155), (107,163,214), (181,223,253), (172,135,99), (221,201,180), (189,10,54), (244,115,122)]\n",
    "for i in range(len(tableau2)):\n",
    "    r, g, b = tableau2[i]    \n",
    "    tableau2[i] = (r / 255., g / 255., b / 255.)\n",
    "\n",
    "hex_list = [\"dd041d\",\"f45b69\",\"f6e8ea\",\"67a9cf\",\"0a2463\"][::-1]\n",
    "\n",
    "def hex_to_rgb(value):\n",
    "    value = value.strip(\"#\") # removes hash symbol if present\n",
    "    lv = len(value)\n",
    "    return tuple(int(value[i:i + lv // 3], 16) for i in range(0, lv, lv // 3))\n",
    "\n",
    "def rgb_to_dec(value):\n",
    "    return [v/256 for v in value]\n",
    "\n",
    "def get_continuous_cmap(hlist):\n",
    "    rgb_list = [rgb_to_dec(hex_to_rgb(i)) for i in hlist]\n",
    "    float_list = list(np.linspace(0,1,len(rgb_list)))\n",
    "    cdict = dict()\n",
    "    for num, col in enumerate(['red', 'green', 'blue']):\n",
    "        col_list = [[float_list[i], rgb_list[i][num], rgb_list[i][num]] for i in range(len(float_list))]\n",
    "        cdict[col] = col_list\n",
    "    cmp = mcolors.LinearSegmentedColormap('my_cmp', segmentdata=cdict, N=256)\n",
    "    return cmp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Compare Bubble Correlators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_comparison3(multiplier, threshold, filter, xrange):\n",
    "    \"\"\" Same multiplier; comparison between same correlator type of each phi0, lambda \"\"\"\n",
    "#    mark = cycle(('o', 'D', 's'))\n",
    "    linestyle = cycle(('solid', 'dashed', 'dotted'))#, 'dashdot'))\n",
    "    linestyle = ['solid', 'dashed', 'dotted'][::-1]\n",
    "    tabl = [tableau2[0],tableau2[2],tableau1[0]]\n",
    "    tabl2 = [tableau2[1],tableau2[3],tableau1[1]]\n",
    "    fig = plt.figure(figsize=(18,9))\n",
    "    gs = gridspec.GridSpec(3, 1, height_ratios=[4,2,4]) \n",
    "    ax = [[],[],[]]\n",
    "    ax[0] = plt.subplot(gs[0])\n",
    "    ax[1] = plt.subplot(gs[1], sharex = ax[0])\n",
    "    ax[2] = plt.subplot(gs[2], sharex = ax[1])\n",
    "    plt.setp(ax[0].get_xticklabels(), visible = False)\n",
    "    plt.setp(ax[1].get_xticklabels(), visible = False)\n",
    "    plt.subplots_adjust(hspace=.0)\n",
    "\n",
    "    xlist = 0.5*(xrange[:-1]+xrange[1:])/filter\n",
    "    for data in [0,1,2]:\n",
    "        for phi0, lamb, i in zip(list_phi0, list_lamb, range(len(list_phi0))):\n",
    "            if data == 0 or data == 1:\n",
    "                corr_data = np.load(data_file_1D([0,1,2,3], xrange[-1]-xrange[-2], multiplier, filter))\n",
    "                rivolo = np.asarray(corr_data[i][data])\n",
    "                markers, caps, bars = ax[-data].errorbar(xlist, rivolo[:,0], yerr=rivolo[:,1], color=tabl[i], linewidth=2, ms=4, ecolor=tabl[i], elinewidth=4, label=r'$\\phi_0$ = {:.2f}'.format(phi0)+r', $\\lambda$ = '+str(lamb))\n",
    "\n",
    "            elif data == 2:\n",
    "                corr_data = np.load(data_file_1D([0,1,2,3], xrange[-1]-xrange[-2], multiplier, filter))\n",
    "                rivolo1, rivolo2 = np.asarray(corr_data[i][data]), np.asarray(corr_data[i][data+1])\n",
    "                rivolo, rivoloerr = 0.5*(rivolo1[:,0]+rivolo2[:,0]), 0.5*np.sqrt(rivolo1[:,1]**2+rivolo2[:,1]**2)\n",
    "                markers, caps, bars = ax[1].errorbar(xlist, rivolo, yerr=rivoloerr, color=tabl[i], linewidth=2, ms=4, ecolor=tabl[i], elinewidth=4, label=r'$\\phi_0$ = {:.2f}'.format(phi0)+r', $\\lambda$ = '+str(lamb))\n",
    "\n",
    "#            prediction0 = np.load(thrcorr_file(list_type[data], threshold, phi0, lamb))\n",
    "#            xaxis = np.arange(min(xrange), max(xrange)+1)[:len(prediction0)]\n",
    "#            ax.plot(xaxis, prediction0, ls='-.', linewidth=2, color=tabl[j], alpha=0.5)\n",
    "\n",
    "            [bar.set_alpha(0.3) for bar in bars]\n",
    "            [cap.set_alpha(0.3) for cap in caps]\n",
    "#            print([round_to_n(j[0], 5) for j in corr_data[i][3]])\n",
    "    handles, labels = ax[0].get_legend_handles_labels()\n",
    "    handles = [h[0] for h in handles]\n",
    "    ax[0].legend(handles, labels, numpoints=1, fontsize='medium', fancybox=True)\n",
    "    for i in range(len(ax)):\n",
    "        ax[i].set_xlim((xrange[0]/filter, 1000/filter))\n",
    "        ax[i].tick_params(direction='in', width='1')\n",
    "        ax[i].grid(alpha=0.5, linestyle='-', linewidth=0.5)\n",
    "        ax[i].set(xlabel=r'$\\bar{r}/R_0$')\n",
    "    ax[0].set(ylabel=list_title_type[0])\n",
    "    ax[1].set(ylabel=list_title_type[3])\n",
    "    ax[2].set(ylabel=list_title_type[2])\n",
    "#    plt.savefig(plots_file+'compare_correlators_by_multiplier.png')\n",
    "#    plt.savefig('/home/dpirvu/compare_correlators_by_multiplier.png')\n",
    "    plt.show()\n",
    "    return\n",
    "\n",
    "def plot_comparison4(phi0, lamb, filter, z, xrange):\n",
    "    \"\"\" Same phi0, lamb; comparison between detection thresholds \"\"\"\n",
    "#    mark = cycle(('o', 'D', 's'))\n",
    "    linestyle = cycle(('solid', 'dashed', 'dotted'))#, 'dashdot'))\n",
    "    linestyle = ['solid', 'dashed', 'dotted'][::-1]\n",
    "    tabl = [tableau2[0],tableau2[2],tableau1[0]]\n",
    "    tabl2 = [tableau2[1],tableau2[3],tableau1[1]]\n",
    "    fig = plt.figure(figsize=(18,9))\n",
    "    gs = gridspec.GridSpec(3, 1, height_ratios=[4,2,4]) \n",
    "    ax = [[],[],[]]\n",
    "    ax[0] = plt.subplot(gs[0])\n",
    "    ax[1] = plt.subplot(gs[1], sharex = ax[0])\n",
    "    ax[2] = plt.subplot(gs[2], sharex = ax[1])\n",
    "    plt.setp(ax[0].get_xticklabels(), visible = False)\n",
    "    plt.setp(ax[1].get_xticklabels(), visible = False)\n",
    "    plt.subplots_adjust(hspace=.0)\n",
    "\n",
    "    xlist = 0.5*(xrange[:-1]+xrange[1:])/filter\n",
    "    for data, j in zip([0,1,2], range(len([0,1,2]))):\n",
    "        for multiplier, threshold, i in zip(list_multiplier[::], list_threshold[::], range(len(list_multiplier[::]))):\n",
    "#            prediction0 = np.load(thrcorr_file(list_type[data], threshold, phi0, lamb))\n",
    "#            xaxis = np.arange(min(xrange), max(xrange)+1)[:len(prediction0)]\n",
    "#            ax.plot(xaxis, prediction0, ls='-.', linewidth=2, color=tabl[j], alpha=0.5)\n",
    "\n",
    "            if data == 0 or data == 1:\n",
    "                corr_data = np.load(data_file_1D([0,1,2,3], xrange[-1]-xrange[-2], multiplier, filter))\n",
    "                rivolo = np.asarray(corr_data[z][data])\n",
    "                if j == 0:\n",
    "                    markers, caps, bars = ax[-data].errorbar(xlist, rivolo[:,0], yerr=rivolo[:,1], color=tabl[j], linestyle=linestyle[i], linewidth=2, ms=4, ecolor=tabl[j], elinewidth=4, label=r'$\\phi_t$ = {:.2f}'.format(threshold))\n",
    "                else:\n",
    "                    markers, caps, bars = ax[-data].errorbar(xlist, rivolo[:,0], yerr=rivolo[:,1], color=tabl[j], linestyle=linestyle[i], linewidth=2, ms=4, ecolor=tabl[j], elinewidth=4)\n",
    "\n",
    "            elif data == 2:\n",
    "                corr_data = np.load(data_file_1D([0,1,2,3], xrange[-1]-xrange[-2], multiplier, filter))\n",
    "                rivolo1, rivolo2 = np.asarray(corr_data[z][data]), np.asarray(corr_data[z][data+1])\n",
    "                rivolo, rivoloerr = 0.5*(rivolo1[:,0]+rivolo2[:,0]), 0.5*np.sqrt(rivolo1[:,1]**2+rivolo2[:,1]**2)\n",
    "                if j == 0:\n",
    "                    markers, caps, bars = ax[1].errorbar(xlist, rivolo, yerr=rivoloerr, color=tabl[j], linestyle=linestyle[i], linewidth=2, ms=4, ecolor=tabl[j], elinewidth=4, label=r'$\\phi_t$ = {:.2f}'.format(threshold))\n",
    "                else:\n",
    "                    markers, caps, bars = ax[1].errorbar(xlist, rivolo, yerr=rivoloerr, color=tabl[j], linestyle=linestyle[i], linewidth=2, ms=4, ecolor=tabl[j], elinewidth=4)\n",
    "\n",
    "            [bar.set_alpha(0.3) for bar in bars]\n",
    "            [cap.set_alpha(0.3) for cap in caps]\n",
    "    handles, labels = ax[0].get_legend_handles_labels()\n",
    "    handles = [h[0] for h in handles]\n",
    "    ax[0].legend(handles, labels, numpoints=1,  title=r'$\\phi_0$ = {:.2f}'.format(phi0)+r', $\\lambda$ = '+str(lamb), fontsize='medium', fancybox=True)\n",
    "    for i in range(len(ax)):\n",
    "        ax[i].set_xlim((xrange[0]/filter, nLat//2/filter))\n",
    "        ax[i].tick_params(direction='in', width='1')\n",
    "        ax[i].grid(alpha=0.5, linestyle='-', linewidth=0.5)\n",
    "        ax[i].set(xlabel=r'$\\bar{r}/R_0$')\n",
    "    ax[0].set(ylabel=list_title_type[0])\n",
    "    ax[1].set(ylabel=list_title_type[3])\n",
    "    ax[2].set(ylabel=list_title_type[2])\n",
    "#    plt.savefig(plots_file+'compare_correlators_by_params.png')\n",
    "#    plt.savefig('/home/dpirvu/compare_correlators_by_params.png')\n",
    "    plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for smoothing, xstep, xmax in zip(list_filter[::], list_xstep[::], list_xmax[::]):\n",
    "#    xrange = np.arange(0, 50, 5).tolist() + np.arange(50, xmax, xstep).tolist()\n",
    "    xrange = Rrange(xmin, xmax, xstep)\n",
    "    for phi0, lamb, z in zip(list_phi0, list_lamb, range(len(list_phi0))):\n",
    "        plot_comparison4(phi0, lamb, smoothing, z, xrange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for smoothing, xstep, xmax in zip(list_filter[::], list_xstep[::], list_xmax[::]):\n",
    "    xrange = Rrange(xmin, xmax, xstep)\n",
    "    for multiplier, threshold in zip(list_multiplier, list_threshold):\n",
    "        plot_comparison3(multiplier, threshold, smoothing, xrange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_2d_corr(data, matrix_vec, valmin, valmax, xrange, trange, filter):\n",
    "    print(xrange)\n",
    "    print(trange)\n",
    "    fig = plt.figure(figsize=(6.5*len(matrix_vec), 6.))\n",
    "    grid = ImageGrid(fig, 111, nrows_ncols=(1, len(list_phi0)), share_all=True, axes_pad=0.1, cbar_location=\"right\", cbar_mode=\"single\")\n",
    "    for phi0, lamb, i in zip(list_phi0, list_lamb, range(len(list_phi0))):\n",
    "#        matrix = matrix_vec[i]\n",
    "#        x = np.linspace(xrange[0]/filter, xrange[-1]/filter, len(matrix[0]))\n",
    "#        y = np.linspace(trange[0], trange[-1], len(matrix))\n",
    "#        X, Y = np.meshgrid(x, y)\n",
    "#        f = lambda X, Y: matrix\n",
    "#        Z = f(X,Y)\n",
    "#        im = grid[i].contourf(X, Y, Z, cmap=get_continuous_cmap(hex_list))\n",
    "        ext = [unit_conv*xrange[0]/filter, unit_conv*xrange[-1]/filter, trange[0], trange[-1]]\n",
    "#        ext = [xrange[0], xrange[-1], trange[0], trange[-1]]\n",
    "        im = grid[i].imshow(matrix_vec[i], interpolation='nearest', origin='lower', cmap='viridis', extent=ext)#get_continuous_cmap(hex_list), extent=ext)\n",
    "        im.set_clim(vmin=valmin, vmax=valmax)\n",
    "        grid[i].set_title(r'$\\phi_0$ = {:.2f}'.format(phi0)+r', $\\lambda$ = '+str(lamb))\n",
    "        grid[i].set(xlabel=r'$\\bar{r}/R_0$')\n",
    "        if i == 0:\n",
    "            grid[i].set(ylabel=r'$\\bar{t}$')\n",
    "        grid[i].tick_params(direction='in', width='2', which='both', top=True, right=True)\n",
    "        grid[i].set_xlim((1,40))\n",
    "        grid[i].set_aspect(40/100)\n",
    "    cbar = grid[i].cax.colorbar(im)\n",
    "    grid[i].cax.toggle_label(True)\n",
    "    grid[i].cax.set_title(list_title_type[data])\n",
    "    print(valmax,valmin)\n",
    "#    fig.savefig(plots_file+'type'+list_type[data]+'_correlator2D_dx'+str(int(xrange[1]-xrange[0]))+'_dt'+str(int(trange[1]-trange[0]))+'_multiplier'+str(multiplier)+'.png')\n",
    "    plt.show()\n",
    "    return\n",
    "\n",
    "def plot_2d_corr2(data, matrix_vec, valmin, valmax, xrange, trange, filter):\n",
    "    print(xrange)\n",
    "    print(trange)\n",
    "    fig = plt.figure(figsize=(6.5*len(matrix_vec), 6.))\n",
    "    grid = ImageGrid(fig, 111, nrows_ncols=(1, len(list_phi0)), share_all=True, axes_pad=0.1, cbar_location=\"right\", cbar_mode=\"single\")\n",
    "    for multiplier, threshold, i in zip(list_multiplier, list_threshold, range(len(list_multiplier))):\n",
    "        ext = [unit_conv*xrange[0]/filter, unit_conv*xrange[-1]/filter, trange[0], trange[-1]]\n",
    "        im = grid[i].imshow(matrix_vec[i], interpolation='nearest', origin='lower', cmap='viridis', extent=ext)#get_continuous_cmap(hex_list), extent=ext)\n",
    "        im.set_clim(vmin=valmin, vmax=valmax)\n",
    "        grid[i].set_title(r'$\\phi_0$ = {:.2f}'.format(phi0)+r', $\\lambda$ = '+str(lamb))\n",
    "        grid[i].set(xlabel=r'$\\bar{r}/R_0$')\n",
    "        if i == 0:\n",
    "            grid[i].set(ylabel=r'$\\bar{t}$')\n",
    "        grid[i].tick_params(direction='in', width='2', which='both', top=True, right=True)\n",
    "        grid[i].set_xlim((1,40))\n",
    "        grid[i].set_aspect(40/100)\n",
    "    cbar = grid[i].cax.colorbar(im)\n",
    "    grid[i].cax.toggle_label(True)\n",
    "    grid[i].cax.set_title(list_title_type[data])\n",
    "    print(valmax,valmin)\n",
    "#    fig.savefig(plots_file+'type'+list_type[data]+'_correlator2D_dx'+str(int(xrange[1]-xrange[0]))+'_dt'+str(int(trange[1]-trange[0]))+'_multiplier'+str(multiplier)+'.png')\n",
    "    plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/home/dpirvu/pickle_location/new_bubble_correlations/2d_type0_xstep10_for_phi00.9520_lamb1.5000_filter25.3236.npy'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-48-8c3ef16b73aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_lamb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#,[1],[2,3]]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m             \u001b[0mmatrixVEC\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file2_2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataType\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdataType\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m             \u001b[0mmatrix_vec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-48-8c3ef16b73aa>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_lamb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#,[1],[2,3]]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m             \u001b[0mmatrixVEC\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file2_2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataType\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphi0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlamb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdataType\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m             \u001b[0mmatrix_vec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-1-ae585ba116a3>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*a, **k)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mnp_load_old\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp_load_old\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_pickle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    426\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    427\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 428\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos_fspath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    429\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/home/dpirvu/pickle_location/new_bubble_correlations/2d_type0_xstep10_for_phi00.9520_lamb1.5000_filter25.3236.npy'"
     ]
    }
   ],
   "source": [
    "for smoothing in list_filter:\n",
    "    for phi0, lamb in zip(list_phi0, list_lamb):\n",
    "        for data in [[0]]:#,[1],[2,3]]:\n",
    "            matrixVEC = np.asarray([np.load(data_file2_2D(dataType, xstep, phi0, lamb, smoothing)) for dataType in data])\n",
    "            matrix_vec = []\n",
    "            for j in range(len(list_phi0)):\n",
    "                matrix_vec.append(np.mean(matrixVEC[:,j], axis=0))\n",
    "\n",
    "            plot_2d_corr2(data[0], matrix_vec, np.amin(matrix_vec), np.amax(matrix_vec), xrange, trange, smoothing)\n",
    "    #        print([[[round_to_n(i, 5) for i in j] for j in k] for k in matrix_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1  11  21  31  41  51  61  71  81  91 101 111 121 131 141 151 161 171\n",
      " 181 191 201 211 221 231 241 251 261 271 281 291 301 311 321 331 341 351\n",
      " 361 371 381 391 401 411 421 431 441 451 461 471 481 491 501 511]\n",
      "[-50 -48 -46 -44 -42 -40 -38 -36 -34 -32 -30 -28 -26 -24 -22 -20 -18 -16\n",
      " -14 -12 -10  -8  -6  -4  -2   0   2   4   6   8  10  12  14  16  18  20\n",
      "  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50]\n",
      "65.0 -1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cm/shared/apps/conda-environments/python37/lib/python3.7/site-packages/ipykernel_launcher.py:25: MatplotlibDeprecationWarning: Since 3.2, mpl_toolkits's own colorbar implementation is deprecated; it will be removed two minor releases later.  Set the 'mpl_toolkits.legacy_colorbar' rcParam to False to use Matplotlib's default colorbar implementation and suppress this deprecation warning.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1404x432 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1  11  21  31  41  51  61  71  81  91 101 111 121 131 141 151 161 171\n",
      " 181 191 201 211 221 231 241 251 261 271 281 291 301 311 321 331 341 351\n",
      " 361 371 381 391 401 411 421 431 441 451 461 471 481 491 501 511]\n",
      "[-50 -48 -46 -44 -42 -40 -38 -36 -34 -32 -30 -28 -26 -24 -22 -20 -18 -16\n",
      " -14 -12 -10  -8  -6  -4  -2   0   2   4   6   8  10  12  14  16  18  20\n",
      "  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50]\n",
      "55.0 -1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1404x432 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1  11  21  31  41  51  61  71  81  91 101 111 121 131 141 151 161 171\n",
      " 181 191 201 211 221 231 241 251 261 271 281 291 301 311 321 331 341 351\n",
      " 361 371 381 391 401 411 421 431 441 451 461 471 481 491 501 511]\n",
      "[-50 -48 -46 -44 -42 -40 -38 -36 -34 -32 -30 -28 -26 -24 -22 -20 -18 -16\n",
      " -14 -12 -10  -8  -6  -4  -2   0   2   4   6   8  10  12  14  16  18  20\n",
      "  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50]\n",
      "65.0 -1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1404x432 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1  11  21  31  41  51  61  71  81  91 101 111 121 131 141 151 161 171\n",
      " 181 191 201 211 221 231 241 251 261 271 281 291 301 311 321 331 341 351\n",
      " 361 371 381 391 401 411 421 431 441 451 461 471 481 491 501 511]\n",
      "[-50 -48 -46 -44 -42 -40 -38 -36 -34 -32 -30 -28 -26 -24 -22 -20 -18 -16\n",
      " -14 -12 -10  -8  -6  -4  -2   0   2   4   6   8  10  12  14  16  18  20\n",
      "  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50]\n",
      "95.0 -1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1404x432 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/home/dpirvu/pickle_location/new_bubble_correlations/2d_type0_xstep10_multiplier0.3_filter11.7683.npy'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-49-07b8f7596dc6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_multiplier\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_threshold\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#,[1],[2,3]]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m             \u001b[0mmatrixVEC\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file_2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataType\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdataType\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m             \u001b[0mmatrix_vec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-49-07b8f7596dc6>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_multiplier\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_threshold\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#,[1],[2,3]]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m             \u001b[0mmatrixVEC\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file_2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataType\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmultiplier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdataType\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m             \u001b[0mmatrix_vec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_phi0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-1-ae585ba116a3>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*a, **k)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mnp_load_old\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp_load_old\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_pickle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    426\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    427\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 428\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos_fspath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    429\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/home/dpirvu/pickle_location/new_bubble_correlations/2d_type0_xstep10_multiplier0.3_filter11.7683.npy'"
     ]
    }
   ],
   "source": [
    "for smoothing in list_filter:\n",
    "    for multiplier, threshold in zip(list_multiplier[::], list_threshold[::]):\n",
    "        for data in [[0]]:#,[1],[2,3]]:\n",
    "            matrixVEC = np.asarray([np.load(data_file_2D(dataType, xstep, multiplier, smoothing)) for dataType in data])\n",
    "            matrix_vec = []\n",
    "            for j in range(len(list_phi0)):\n",
    "                matrix_vec.append(np.mean(matrixVEC[:,j], axis=0))\n",
    "\n",
    "            plot_2d_corr(data[0], matrix_vec, np.amin(matrix_vec), np.amax(matrix_vec), xrange, trange, smoothing)\n",
    "    #        print([[[round_to_n(i, 5) for i in j] for j in k] for k in matrix_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7 (conda) - recommended",
   "language": "python",
   "name": "python37-conda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
